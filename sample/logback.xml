<configuration>

  <property name="basedir" value="${LOG_S3_BASE_DIR:-api}" />
  <property name="timedir" value="${LOG_S3_TIME_DIR_PATTERN:-%d{yyyy-MM/dd/HH}}" />
  <property name="s3bucket" value="${LOG_S3_BUCKET:-mybucket}"/>
  <property name="filesize" value="${LOG_ARCHIVE_SIZE:-100MB}"/>
  <property name="loglevel" value="${LOG_LEVEL:-INFO}"/>

  <appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${application.home:-.}/logs/info.log</file>
    <encoder>
      <pattern>%date %-5level %logger{32} - %message%n%xException</pattern>
    </encoder>
    <rollingPolicy class="ch.qos.logback.core.rolling.S3FixedWindowRollingPolicy">
      <fileNamePattern>${application.home:-.}/logs/info_%i.log.gz</fileNamePattern>
      <minIndex>0</minIndex>
      <maxIndex>4</maxIndex>
      <awsAccessKey>${AWS_ACCESS_KEY}</awsAccessKey>
      <awsSecretKey>${AWS_SECRET_KEY}</awsSecretKey>
      <s3BucketName>${s3bucket}</s3BucketName>
      <s3FolderName>${basedir}/${timedir}</s3FolderName>
      <rolloverOnExit>true</rolloverOnExit>
      <shutdownHookType>JVM_SHUTDOWN_HOOK</shutdownHookType>
      <prefixTimestamp>true</prefixTimestamp>
      <prefixIdentifier>true</prefixIdentifier>
    </rollingPolicy>
    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
      <maxFileSize>${filesize}</maxFileSize>
    </triggeringPolicy>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>INFO</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <appender name="ASYNCFILE_INFO" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>512</queueSize>
    <appender-ref ref="FILE_INFO" />
  </appender>

  <appender name="FILE_WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${application.home:-.}/logs/warn.log</file>
    <encoder>
      <pattern>%date %-5level %logger{32} - %message%n%xException</pattern>
    </encoder>
    <rollingPolicy class="ch.qos.logback.core.rolling.S3TimeBasedRollingPolicy">
      <fileNamePattern>${application.home:-.}/logs/%d{yyyyMMddHH}/warn_%i.log.gz</fileNamePattern>
      <maxHistory>5</maxHistory>
      <awsAccessKey>${AWS_ACCESS_KEY}</awsAccessKey>
      <awsSecretKey>${AWS_SECRET_KEY}</awsSecretKey>
      <s3BucketName>${s3bucket}</s3BucketName>
      <s3FolderName>${basedir}/${timedir}</s3FolderName>
      <rolloverOnExit>true</rolloverOnExit>
      <shutdownHookType>JVM_SHUTDOWN_HOOK</shutdownHookType>
      <prefixTimestamp>true</prefixTimestamp>
      <prefixIdentifier>true</prefixIdentifier>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${filesize}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>WARN</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <appender name="ASYNCFILE_WARN" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>512</queueSize>
    <appender-ref ref="FILE_WARN" />
  </appender>

  <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${application.home:-.}/logs/error.log</file>
    <encoder>
      <pattern>%date %-5level %logger{32} - %message%n%xException</pattern>
    </encoder>
    <rollingPolicy class="ch.qos.logback.core.rolling.S3TimeBasedRollingPolicy">
      <fileNamePattern>${application.home:-.}/logs/%d{yyyyMMddHH}/error_%i.log.gz</fileNamePattern>
      <maxHistory>5</maxHistory>
      <awsAccessKey>${AWS_ACCESS_KEY}</awsAccessKey>
      <awsSecretKey>${AWS_SECRET_KEY}</awsSecretKey>
      <s3BucketName>${s3bucket}</s3BucketName>
      <s3FolderName>${basedir}/${timedir}</s3FolderName>
      <rolloverOnExit>true</rolloverOnExit>
      <shutdownHookType>JVM_SHUTDOWN_HOOK</shutdownHookType>
      <prefixTimestamp>true</prefixTimestamp>
      <prefixIdentifier>true</prefixIdentifier>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${filesize}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <appender name="ASYNCFILE_ERROR" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>512</queueSize>
    <appender-ref ref="FILE_ERROR" />
  </appender>

  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <target>System.out</target>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>DEBUG</level>
      <onMatch>ACCEPT</onMatch>
    </filter>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>INFO</level>
      <onMatch>ACCEPT</onMatch>
    </filter>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>TRACE</level>
      <onMatch>ACCEPT</onMatch>
    </filter>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>WARN</level>
      <onMatch>DENY</onMatch>
    </filter>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>DENY</onMatch>
    </filter>
    <encoder>
      <pattern>%date %-5level %logger{32} - %message%n%xException</pattern>
    </encoder>
  </appender>

  <appender name="ASYNCSTDOUT" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>512</queueSize>
    <appender-ref ref="STDOUT" />
  </appender>

  <appender name="STDERR" class="ch.qos.logback.core.ConsoleAppender">
    <target>System.err</target>
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>WARN</level>
    </filter>
    <encoder>
      <pattern>%date %-5level %logger{32} - %message%n%xException</pattern>
    </encoder>
  </appender>

  <appender name="ASYNCSTDERR" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>512</queueSize>
    <appender-ref ref="STDERR" />
  </appender>


  <if condition='property("LOGGING_STDOUT").contains("TRUE")'>
    <then>
      <root level="${loglevel}">
        <appender-ref ref="ASYNCSTDOUT" />
        <appender-ref ref="ASYNCSTDERR" />
      </root>
    </then>
    <else>
      <root level="${loglevel}">
        <appender-ref ref="ASYNCFILE_INFO" />
        <appender-ref ref="ASYNCFILE_WARN" />
        <appender-ref ref="ASYNCFILE_ERROR" />
      </root>
    </else>
  </if>

</configuration>
